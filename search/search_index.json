{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to NASA_Bot_Python","text":"<p>NASA_Bot_Python is a simple, extensible discord bot with a focus on stability and functionality. It is written using python and discord.py.</p>"},{"location":"#main-features","title":"Main Features:","text":"<ul> <li>Posts NASA APOD (Astronomy Picture of the Day) on a daily basis.</li> <li>Allows for easy deployment with docker.</li> <li>Contains easy to use utils, and guidance on extending the bot using python.</li> </ul>"},{"location":"#to-get-started","title":"To Get Started...","text":"<p>Just want to run the bot? Take a look at the Quick-Start-Guide.</p> <p>For more in-depth guidance, it is best to refer to the How-To-Guides.</p> <p>For a reference guide to the config options, check the Config Reference.</p> <p>For a reference guide to using the bots various commands, check out the Command_Reference.</p>"},{"location":"#api-reference","title":"API Reference","text":"<p>Contains all the classes and methods used by the bot. It can be found here.</p>"},{"location":"#bug-reports","title":"Bug Reports","text":"<p>If you have found an issue with the bot, the best way to report it is by creating an issue on the NASA_Bot_Python Github Page.</p> <p>If the issue is a Security flaw please report it using the GitHub private vulnerability reporting, or you may reach out to me directly at:  ryan.steffanbiz@gmail.com</p>"},{"location":"#licence-details","title":"Licence Details:","text":"<p>The licence details can be found here.</p>"},{"location":"about/","title":"Licence Details:","text":""},{"location":"about/#nasa_bot_python","title":"NASA_BOT_PYTHON:","text":"<p>MIT License</p> <p>Copyright (c) 2024 Ryan Steffan</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/#projects-used","title":"Projects Used:","text":""},{"location":"about/#pyyaml","title":"PyYAML:","text":"<p>Copyright (c) 2017-2021 Ingy d\u00f6t Net Copyright (c) 2006-2016 Kirill Simonov</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/#requests","title":"requests:","text":"<pre><code>                             Apache License\n                       Version 2.0, January 2004\n                    http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li>Definitions.</li> </ol> <p>\"License\" shall mean the terms and conditions for use, reproduction,    and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by    the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all    other entities that control, are controlled by, or are under common    control with that entity. For the purposes of this definition,    \"control\" means (i) the power, direct or indirect, to cause the    direction or management of such entity, whether by contract or    otherwise, or (ii) ownership of fifty percent (50%) or more of the    outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity    exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,    including but not limited to software source code, documentation    source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical    transformation or translation of a Source form, including but    not limited to compiled object code, generated documentation,    and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or    Object form, made available under the License, as indicated by a    copyright notice that is included in or attached to the work    (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object    form, that is based on (or derived from) the Work and for which the    editorial revisions, annotations, elaborations, or other modifications    represent, as a whole, an original work of authorship. For the purposes    of this License, Derivative Works shall not include works that remain    separable from, or merely link (or bind by name) to the interfaces of,    the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including    the original version of the Work and any modifications or additions    to that Work or Derivative Works thereof, that is intentionally    submitted to Licensor for inclusion in the Work by the copyright owner    or by an individual or Legal Entity authorized to submit on behalf of    the copyright owner. For the purposes of this definition, \"submitted\"    means any form of electronic, verbal, or written communication sent    to the Licensor or its representatives, including but not limited to    communication on electronic mailing lists, source code control systems,    and issue tracking systems that are managed by, or on behalf of, the    Licensor for the purpose of discussing and improving the Work, but    excluding communication that is conspicuously marked or otherwise    designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity    on behalf of whom a Contribution has been received by Licensor and    subsequently incorporated within the Work.</p> <ol> <li> <p>Grant of Copyright License. Subject to the terms and conditions of    this License, each Contributor hereby grants to You a perpetual,    worldwide, non-exclusive, no-charge, royalty-free, irrevocable    copyright license to reproduce, prepare Derivative Works of,    publicly display, publicly perform, sublicense, and distribute the    Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of    this License, each Contributor hereby grants to You a perpetual,    worldwide, non-exclusive, no-charge, royalty-free, irrevocable    (except as stated in this section) patent license to make, have made,    use, offer to sell, sell, import, and otherwise transfer the Work,    where such license applies only to those patent claims licensable    by such Contributor that are necessarily infringed by their    Contribution(s) alone or by combination of their Contribution(s)    with the Work to which such Contribution(s) was submitted. If You    institute patent litigation against any entity (including a    cross-claim or counterclaim in a lawsuit) alleging that the Work    or a Contribution incorporated within the Work constitutes direct    or contributory patent infringement, then any patent licenses    granted to You under this License for that Work shall terminate    as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the    Work or Derivative Works thereof in any medium, with or without    modifications, and in Source or Object form, provided that You    meet the following conditions:</p> </li> </ol> <p>(a) You must give any other recipients of the Work or    Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices    stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works    that You distribute, all copyright, patent, trademark, and    attribution notices from the Source form of the Work,    excluding those notices that do not pertain to any part of    the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its    distribution, then any Derivative Works that You distribute must    include a readable copy of the attribution notices contained    within such NOTICE file, excluding those notices that do not    pertain to any part of the Derivative Works, in at least one    of the following places: within a NOTICE text file distributed    as part of the Derivative Works; within the Source form or    documentation, if provided along with the Derivative Works; or,    within a display generated by the Derivative Works, if and    wherever such third-party notices normally appear. The contents    of the NOTICE file are for informational purposes only and    do not modify the License. You may add Your own attribution    notices within Derivative Works that You distribute, alongside    or as an addendum to the NOTICE text from the Work, provided    that such additional attribution notices cannot be construed    as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and    may provide additional or different license terms and conditions    for use, reproduction, or distribution of Your modifications, or    for any such Derivative Works as a whole, provided Your use,    reproduction, and distribution of the Work otherwise complies with    the conditions stated in this License.</p> <ol> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,    any Contribution intentionally submitted for inclusion in the Work    by You to the Licensor shall be under the terms and conditions of    this License, without any additional terms or conditions.    Notwithstanding the above, nothing herein shall supersede or modify    the terms of any separate license agreement you may have executed    with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade    names, trademarks, service marks, or product names of the Licensor,    except as required for reasonable and customary use in describing the    origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or    agreed to in writing, Licensor provides the Work (and each    Contributor provides its Contributions) on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or    implied, including, without limitation, any warranties or conditions    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A    PARTICULAR PURPOSE. You are solely responsible for determining the    appropriateness of using or redistributing the Work and assume any    risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,    whether in tort (including negligence), contract, or otherwise,    unless required by applicable law (such as deliberate and grossly    negligent acts) or agreed to in writing, shall any Contributor be    liable to You for damages, including any direct, indirect, special,    incidental, or consequential damages of any character arising as a    result of this License or out of the use or inability to use the    Work (including but not limited to damages for loss of goodwill,    work stoppage, computer failure or malfunction, or any and all    other commercial damages or losses), even if such Contributor    has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing    the Work or Derivative Works thereof, You may choose to offer,    and charge a fee for, acceptance of support, warranty, indemnity,    or other liability obligations and/or rights consistent with this    License. However, in accepting such obligations, You may act only    on Your own behalf and on Your sole responsibility, not on behalf    of any other Contributor, and only if You agree to indemnify,    defend, and hold each Contributor harmless for any liability    incurred by, or claims asserted against, such Contributor by reason    of your accepting any such warranty or additional liability.</p> </li> </ol>"},{"location":"about/#responses","title":"responses:","text":"<pre><code>                          Apache License\n                    Version 2.0, January 2004\n                 http://www.apache.org/licenses/\n</code></pre> <p>TERMS AND CONDITIONS FOR USE, REPRODUCTION, AND DISTRIBUTION</p> <ol> <li>Definitions.</li> </ol> <p>\"License\" shall mean the terms and conditions for use, reproduction,    and distribution as defined by Sections 1 through 9 of this document.</p> <p>\"Licensor\" shall mean the copyright owner or entity authorized by    the copyright owner that is granting the License.</p> <p>\"Legal Entity\" shall mean the union of the acting entity and all    other entities that control, are controlled by, or are under common    control with that entity. For the purposes of this definition,    \"control\" means (i) the power, direct or indirect, to cause the    direction or management of such entity, whether by contract or    otherwise, or (ii) ownership of fifty percent (50%) or more of the    outstanding shares, or (iii) beneficial ownership of such entity.</p> <p>\"You\" (or \"Your\") shall mean an individual or Legal Entity    exercising permissions granted by this License.</p> <p>\"Source\" form shall mean the preferred form for making modifications,    including but not limited to software source code, documentation    source, and configuration files.</p> <p>\"Object\" form shall mean any form resulting from mechanical    transformation or translation of a Source form, including but    not limited to compiled object code, generated documentation,    and conversions to other media types.</p> <p>\"Work\" shall mean the work of authorship, whether in Source or    Object form, made available under the License, as indicated by a    copyright notice that is included in or attached to the work    (an example is provided in the Appendix below).</p> <p>\"Derivative Works\" shall mean any work, whether in Source or Object    form, that is based on (or derived from) the Work and for which the    editorial revisions, annotations, elaborations, or other modifications    represent, as a whole, an original work of authorship. For the purposes    of this License, Derivative Works shall not include works that remain    separable from, or merely link (or bind by name) to the interfaces of,    the Work and Derivative Works thereof.</p> <p>\"Contribution\" shall mean any work of authorship, including    the original version of the Work and any modifications or additions    to that Work or Derivative Works thereof, that is intentionally    submitted to Licensor for inclusion in the Work by the copyright owner    or by an individual or Legal Entity authorized to submit on behalf of    the copyright owner. For the purposes of this definition, \"submitted\"    means any form of electronic, verbal, or written communication sent    to the Licensor or its representatives, including but not limited to    communication on electronic mailing lists, source code control systems,    and issue tracking systems that are managed by, or on behalf of, the    Licensor for the purpose of discussing and improving the Work, but    excluding communication that is conspicuously marked or otherwise    designated in writing by the copyright owner as \"Not a Contribution.\"</p> <p>\"Contributor\" shall mean Licensor and any individual or Legal Entity    on behalf of whom a Contribution has been received by Licensor and    subsequently incorporated within the Work.</p> <ol> <li> <p>Grant of Copyright License. Subject to the terms and conditions of    this License, each Contributor hereby grants to You a perpetual,    worldwide, non-exclusive, no-charge, royalty-free, irrevocable    copyright license to reproduce, prepare Derivative Works of,    publicly display, publicly perform, sublicense, and distribute the    Work and such Derivative Works in Source or Object form.</p> </li> <li> <p>Grant of Patent License. Subject to the terms and conditions of    this License, each Contributor hereby grants to You a perpetual,    worldwide, non-exclusive, no-charge, royalty-free, irrevocable    (except as stated in this section) patent license to make, have made,    use, offer to sell, sell, import, and otherwise transfer the Work,    where such license applies only to those patent claims licensable    by such Contributor that are necessarily infringed by their    Contribution(s) alone or by combination of their Contribution(s)    with the Work to which such Contribution(s) was submitted. If You    institute patent litigation against any entity (including a    cross-claim or counterclaim in a lawsuit) alleging that the Work    or a Contribution incorporated within the Work constitutes direct    or contributory patent infringement, then any patent licenses    granted to You under this License for that Work shall terminate    as of the date such litigation is filed.</p> </li> <li> <p>Redistribution. You may reproduce and distribute copies of the    Work or Derivative Works thereof in any medium, with or without    modifications, and in Source or Object form, provided that You    meet the following conditions:</p> </li> </ol> <p>(a) You must give any other recipients of the Work or    Derivative Works a copy of this License; and</p> <p>(b) You must cause any modified files to carry prominent notices    stating that You changed the files; and</p> <p>(c) You must retain, in the Source form of any Derivative Works    that You distribute, all copyright, patent, trademark, and    attribution notices from the Source form of the Work,    excluding those notices that do not pertain to any part of    the Derivative Works; and</p> <p>(d) If the Work includes a \"NOTICE\" text file as part of its    distribution, then any Derivative Works that You distribute must    include a readable copy of the attribution notices contained    within such NOTICE file, excluding those notices that do not    pertain to any part of the Derivative Works, in at least one    of the following places: within a NOTICE text file distributed    as part of the Derivative Works; within the Source form or    documentation, if provided along with the Derivative Works; or,    within a display generated by the Derivative Works, if and    wherever such third-party notices normally appear. The contents    of the NOTICE file are for informational purposes only and    do not modify the License. You may add Your own attribution    notices within Derivative Works that You distribute, alongside    or as an addendum to the NOTICE text from the Work, provided    that such additional attribution notices cannot be construed    as modifying the License.</p> <p>You may add Your own copyright statement to Your modifications and    may provide additional or different license terms and conditions    for use, reproduction, or distribution of Your modifications, or    for any such Derivative Works as a whole, provided Your use,    reproduction, and distribution of the Work otherwise complies with    the conditions stated in this License.</p> <ol> <li> <p>Submission of Contributions. Unless You explicitly state otherwise,    any Contribution intentionally submitted for inclusion in the Work    by You to the Licensor shall be under the terms and conditions of    this License, without any additional terms or conditions.    Notwithstanding the above, nothing herein shall supersede or modify    the terms of any separate license agreement you may have executed    with Licensor regarding such Contributions.</p> </li> <li> <p>Trademarks. This License does not grant permission to use the trade    names, trademarks, service marks, or product names of the Licensor,    except as required for reasonable and customary use in describing the    origin of the Work and reproducing the content of the NOTICE file.</p> </li> <li> <p>Disclaimer of Warranty. Unless required by applicable law or    agreed to in writing, Licensor provides the Work (and each    Contributor provides its Contributions) on an \"AS IS\" BASIS,    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or    implied, including, without limitation, any warranties or conditions    of TITLE, NON-INFRINGEMENT, MERCHANTABILITY, or FITNESS FOR A    PARTICULAR PURPOSE. You are solely responsible for determining the    appropriateness of using or redistributing the Work and assume any    risks associated with Your exercise of permissions under this License.</p> </li> <li> <p>Limitation of Liability. In no event and under no legal theory,    whether in tort (including negligence), contract, or otherwise,    unless required by applicable law (such as deliberate and grossly    negligent acts) or agreed to in writing, shall any Contributor be    liable to You for damages, including any direct, indirect, special,    incidental, or consequential damages of any character arising as a    result of this License or out of the use or inability to use the    Work (including but not limited to damages for loss of goodwill,    work stoppage, computer failure or malfunction, or any and all    other commercial damages or losses), even if such Contributor    has been advised of the possibility of such damages.</p> </li> <li> <p>Accepting Warranty or Additional Liability. While redistributing    the Work or Derivative Works thereof, You may choose to offer,    and charge a fee for, acceptance of support, warranty, indemnity,    or other liability obligations and/or rights consistent with this    License. However, in accepting such obligations, You may act only    on Your own behalf and on Your sole responsibility, not on behalf    of any other Contributor, and only if You agree to indemnify,    defend, and hold each Contributor harmless for any liability    incurred by, or claims asserted against, such Contributor by reason    of your accepting any such warranty or additional liability.</p> </li> </ol> <p>END OF TERMS AND CONDITIONS</p> <p>APPENDIX: How to apply the Apache License to your work.</p> <p>To apply the Apache License to your work, attach the following boilerplate notice, with the fields enclosed by brackets \"[]\" replaced with your own identifying information. (Don't include the brackets!)  The text should be enclosed in the appropriate comment syntax for the file format. We also recommend that a file or class name and description of purpose be included on the same \"printed page\" as the copyright notice for easier identification within third-party archives.</p> <p>Copyright 2015 David Cramer</p> <p>Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at</p> <pre><code>http://www.apache.org/licenses/LICENSE-2.0\n</code></pre> <p>Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.</p>"},{"location":"about/#discordpy","title":"discord.py:","text":"<p>The MIT License (MIT)</p> <p>Copyright (c) 2015-present Rapptz</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/#mkdocs","title":"mkdocs:","text":"<p>Copyright \u00a9 2014-present, Tom Christie. All rights reserved.</p> <p>Redistribution and use in source and binary forms, with or without modification, are permitted provided that the following conditions are met:</p> <p>Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution.</p> <p>THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.</p>"},{"location":"about/#mkdocs-material","title":"mkdocs-material:","text":"<p>Copyright (c) 2016-2024 Martin Donath martin.donath@squidfunk.com</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"about/#mkdocstrings","title":"mkdocstrings:","text":"<p>ISC License</p> <p>Copyright (c) 2019, Timoth\u00e9e Mazzucotelli</p> <p>Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.</p>"},{"location":"about/#mkdocstrings-python","title":"mkdocstrings-python:","text":"<p>ISC License</p> <p>Copyright (c) 2021, Timoth\u00e9e Mazzucotelli</p> <p>Permission to use, copy, modify, and/or distribute this software for any purpose with or without fee is hereby granted, provided that the above copyright notice and this permission notice appear in all copies.</p> <p>THE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.  </p>"},{"location":"command-reference/","title":"Command Reference Guide:","text":""},{"location":"command-reference/#table-of-contents","title":"Table of Contents:","text":"<ul> <li>Command Reference Guide:<ul> <li>Table of Contents:</li> <li>Syntax conventions:</li> <li>Commands:<ul> <li>apod:<ul> <li>/daily_image</li> </ul> </li> <li>Built-In:<ul> <li>/core_reload</li> <li>/list_extensions</li> <li>/load_extension [extension]</li> <li>/reload_extension [extension]</li> <li>/unload_extension [extension]</li> <li>/sync</li> </ul> </li> <li>ping:<ul> <li>/ping {True OR False}</li> </ul> </li> <li>settings:<ul> <li>/setting list_all</li> <li>/setting set {setting} {new_value}</li> <li>/setting unset {setting}</li> <li>/setting restore {change_number}</li> <li>/setting view_history</li> </ul> </li> </ul> </li> </ul> </li> </ul>"},{"location":"command-reference/#syntax-conventions","title":"Syntax conventions:","text":"<p>When reading the commands some of the syntax might be a bit confusing. To help here is a short guide to the conventions that will be followed for all commands on this page.</p> Syntax Item Explanation /command The name of a command, prefixed with a slash to indicate it is a slash command. sub_command An argument used to alter the usage of the command. [argument] Indicates a command that is optional and the user must own input. {arg1 OR arg2} Indicates the user must provide some form of input. italicized If an argument is italicized that means the user chooses the input. bolded If an argument is bolded, that means that the user must choose a predefined input. <p>If you do not fully understand this right now, that is fine. You will learn to use the commands with time and get used to them.</p> <p>Finally, each command is organized by extension.</p>"},{"location":"command-reference/#commands","title":"Commands:","text":""},{"location":"command-reference/#apod","title":"apod:","text":""},{"location":"command-reference/#daily_image","title":"/daily_image","text":"<p>Posts the Astronomy picture of the day. Post in channel the command is used in.</p> <p>Required Permissions: None</p>"},{"location":"command-reference/#built-in","title":"Built-In:","text":"<p> All the Built-In commands are core to the bot and can not be loaded/unloaded. They also are all hybrid commands (work with prefix and slash) to ensue that they always function. </p>"},{"location":"command-reference/#core_reload","title":"/core_reload","text":"<p>Fully restarts the discord bot.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#list_extensions","title":"/list_extensions","text":"<p>Lists all the extensions that are available to the bot.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#load_extension-extension","title":"/load_extension [extension]","text":"<p>Loads a specified extension. If no extension is specified then all available extensions are loaded.</p> <p>Args: \u2003 extension: The name of the extension to load.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#reload_extension-extension","title":"/reload_extension [extension]","text":"<p>Unloads and then loads an extension. If no extension is specified then all extensions are reloaded.</p> <p>Args: \u2003 extension: The extension to reload.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#unload_extension-extension","title":"/unload_extension [extension]","text":"<p>Unloads an extension. If no extension is specified all extensions are unloaded.</p> <p>Args:  \u2003 extension: The extension to unload.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#sync","title":"/sync","text":"<p>Syncs the slash commands from the bot to the server.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#ping","title":"ping:","text":""},{"location":"command-reference/#ping-true-or-false","title":"/ping {True OR False}","text":"<p>Checks the bot latency and test if it is up.</p> <p>Args: True OR False: If the bot should respond with the ping value.</p> <p>Required Permissions: None</p>"},{"location":"command-reference/#settings","title":"settings:","text":""},{"location":"command-reference/#setting-list_all","title":"/setting list_all","text":"<p>Lists all the settings that are currently configured for the bot.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#setting-set-setting-new_value","title":"/setting set {setting} {new_value}","text":"<p>Updates a value in the bot config.</p> <p>Args: \u2003 setting: The setting to make changes to. \u2003 new_value: The new value that the setting should be set to.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#setting-unset-setting","title":"/setting unset {setting}","text":"<p>Sets a setting to the value of \"unset\".</p> <p>Args: \u2003 setting: The setting that you want to set to a value of \"unset\".</p> <p>Notes: You will probably almost never need to use this. The value that it sets the specified setting to is a string value of unset. All this is useful for is if an extension wants to check if a value is unset.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#setting-restore-change_number","title":"/setting restore {change_number}","text":"<p>Undoes a specified change from the command setting history.</p> <p>Args: \u2003 change_number: The number of a change made. Found by using /setting view_history.</p> <p>Required Permissions: Administrator</p>"},{"location":"command-reference/#setting-view_history","title":"/setting view_history","text":"<p>Lists the past 5 changes made the bot's config file.</p> <p>Required Permissions: Administrator</p>"},{"location":"config-reference/","title":"Config Reference:","text":""},{"location":"config-reference/#table-of-contents","title":"Table of Contents:","text":"<ul> <li>Config Reference:<ul> <li>Table of Contents:</li> <li>About:</li> <li>Types Guide:</li> <li>Setting/Config Guide:</li> </ul> </li> </ul>"},{"location":"config-reference/#about","title":"About:","text":"<p>Here you will find a guide to what each setting that the bot comes with by default is for, how it works, what you can set it to.</p> <p>All values in the setting row can be altered with the /setting command.</p> <p>Ex.  <code>/setting set apod_channel 2345238457</code></p>"},{"location":"config-reference/#types-guide","title":"Types Guide:","text":"<p>These are an explanation of types used in the config:</p> Type Example Notes int <code>1</code>, <code>20</code>, <code>53</code>, <code>234</code> Must be a whole number. float <code>1.5</code>, <code>23.454</code>, <code>213.23</code>, <code>3.005</code> Numbers that contain a decimal. string <code>asfd</code>, <code>Hello</code> A set of characters, think words and sentences. char <code>a</code>, <code>A</code>, <code>f</code>, <code>F</code> A singular letter. special_char <code>!</code>, <code>@</code>, <code>#</code>, <code>$</code>, <code>%</code> Special characters that are not letter. NONE <code>NONE</code> This is a value that can not be set."},{"location":"config-reference/#settingconfig-guide","title":"Setting/Config Guide:","text":"Setting Allowed Values Notes apod_channel int Sets the channel where the daily apod post will happen. apod_url string The url from where to pull the daily image. guild int The id of the server in which the bot will be used. Needed to sync commands prefix special_char The prefix to use when running commands without the slash. time NONE See hour and minute values of this table for info on time values. hour int The hour at which the bot will post in UTC time. minute int The minute at which the bot will post in UTC time. token string The token from the discord developer portal that is used to run and login the bot."},{"location":"how-to-guides/","title":"How-To Guides:","text":""},{"location":"how-to-guides/#table-of-contents","title":"Table of Contents:","text":""},{"location":"how-to-guides/#what-this-page-is-for","title":"What This Page is For:","text":""},{"location":"quick-start-guide/","title":"How to get started:","text":""},{"location":"quick-start-guide/#table-of-contents","title":"Table of Contents:","text":"<ul> <li>How to get started:<ul> <li>Table of Contents:</li> <li>Using Docker (Recommended):<ul> <li>What you will need before you get started:</li> <li>Break Down of the Run Command:</li> </ul> </li> <li>Running on bare metal:<ul> <li>supervisord:</li> </ul> </li> <li>Setting up in discord:<ul> <li>Changing the NASA api key:</li> </ul> </li> </ul> </li> </ul>"},{"location":"quick-start-guide/#using-docker-recommended","title":"Using Docker (Recommended):","text":"<p> This section assumes that you already have docker installed, if you do not, pause here and go install docker. Once you are done, continue here. </p> <p>Dockers Documentation: https://docs.docker.com/</p> <p>This guide also assumes that you have created a bot using the discord developer portal, if you have not then pause here, and then continue here after that is done. </p> <p>How to create a discord</p> <p>bot: https://discordpy.readthedocs.io/en/stable/discord.html</p>"},{"location":"quick-start-guide/#what-you-will-need-before-you-get-started","title":"What you will need before you get started:","text":"<ul> <li>The token for your discord bot. Obtained from the discord developer portal.</li> <li>The guild of the server that you wish to invite the bot to. This can be obtained by using the dev tools in the discord   app.</li> <li>Choose a prefix to use for the bot. If you are unsure what to choose, check what bots you have in your server, and see   what they use. You do not want to have conflicts. Good options are special characters (!@#$%^&amp;*) as they are not used   to prefix messages usually.</li> </ul> <p>Using Docker to deploy the bot is the easiest and best supported method. Below is the commands needed to get started with it:</p> <p>First pull the image:</p> <pre><code>docker pull ryansteffan/nasa_bot\n</code></pre> <p>Then run the container, here is a basic command to get it up and running:</p> <pre><code>docker run -d --name nasa_bot --restart always -e prefix={choose_a_prefix} -e guild={server_id} -e token={token_for_bot} ryansteffan/nasa_bot\n</code></pre>"},{"location":"quick-start-guide/#break-down-of-the-run-command","title":"Break Down of the Run Command:","text":"<ul> <li><code>--name</code> is used to name the bot, we are giving the bot the name nasa_bot in the example.</li> <li><code>--restart always</code> tells the bot when to restart, always makes sure it starts on boot or if it crashes.</li> <li><code>-e</code> is used to pass environment variables, prefix is the prefix for commands, guild is your server id, and the token   is the token for the bot.</li> </ul>"},{"location":"quick-start-guide/#running-on-bare-metal","title":"Running on bare metal:","text":"<p> Continue with caution, this form of deployment is missing features. </p> <p>While it is possible, it is not recommended that you deploy using bare metal. Some features are missing, and this form of deployment will see minimal development resources.</p> <p>That being said, here are the basics to get it up and running:</p> <p>First ensure that the needed dependencies are installed:</p> <pre><code># On Debian/Ubuntu\nsudo apt update\nsudo apt upgrade\nsudo apt install python3 python3-venv\n</code></pre> <pre><code># On Arch based Linux distros\nsudo pacman -Syu\nsudo pacman -S python3 python3-venv\n</code></pre> <p>Start by making a directory to store the bot in:</p> <pre><code>mkdir ./nasa_bot\ncd ./nasa_bot\n</code></pre> <p>Then you will need to clone the GitHub repo into the folder:</p> <pre><code>git clone https://github.com/TheTurnnip/NASA_BOT_PYTHON.git\ncd ./NASA_BOT_PYTHON\n</code></pre> <p>Make a virtual environment to install the bot in, and install the required packages:</p> <pre><code>python3 -m venv .\nsource ./bin/activate\npip install -r ./requirements.txt\n</code></pre> <p>Now configure the bot with the required settings to get it running:</p> <pre><code># Using nano to edit the file. Press ctrl + x to exit and save.\nnano ./conf/bot_config.yaml\n</code></pre> <p>Finally, run the bot:</p> <pre><code>python3 main.py\n</code></pre> <p>That is it, you now have a basic form of the bot running on bare metal.</p> <p>You are probably going to want to run the bot in the background, this is beyond the scope of the tutorial.</p> <p>If you wish to do so, here are a few places to look to get you started:</p> <ul> <li>systemd (built into most linux distros).</li> <li>cron (Used to schedule tasks on linux, simpler than systemd).</li> <li>supervisord (Not included with most distros, see below for some details on it.)</li> </ul>"},{"location":"quick-start-guide/#supervisord","title":"supervisord:","text":"<p>Supervisor Documentation:</p> <p>http://supervisord.org/</p> <p>If you choose to use this, some of the work is done for you already and it will restore the lost functionality of restarting the bot via discord commands.</p> <p>First, you need to install supervisord.</p> <p>Next, you will need to configure supervisord, which can be done with the supervisord.conf file in the GitHub repo.</p> <p>And that is the basics. Make sure to read the docs for supervisord as this is a very cursory glance of it.</p>"},{"location":"quick-start-guide/#setting-up-in-discord","title":"Setting up in discord:","text":"<p>Now that the bot has been installed, a few tweaks need to be made in discord.</p> <p>Here is a quick list of things to do:</p> <ol> <li>Sync the app commands. By default, you will not have slash commands because they must sync.    Refer to the /sync command for guidance.</li> <li>Set the channel for nasa_bot to post images in. Refer to the /setting command.</li> <li>Set the time to post the image at (Time is in 24 hour format, and the timezone is UTC).    Refer to the /setting command for this aswell.</li> <li>I suggest that you get an API token from NASA's open api if you wish to use the bot extensively,    as the demo key is great to get the bot up and running, but NASA suggests users use a normal key.    Below are instructions on how to change the key.</li> <li>Use the /reload_extension command (with no optional parameters) to reload all the extensions.</li> </ol>"},{"location":"quick-start-guide/#changing-the-nasa-api-key","title":"Changing the NASA api key:","text":"<p>To change the key, the easiest method is to onece again use the /setting command. You are going to want to set the value of the apod_url. The value can be kept mostly the same just change what the api_key is equal to.</p> <p>Ex. Instead of <code>https://api.nasa.gov/planetary/apod?api_key=DEMO_KEY</code> you could change the value to something like <code>https://api.nasa.gov/planetary/apod?api_key=12345</code>, where 12345 is your nasa api key.</p> <p>Now reload the extensions and test if the api key works with the /apod_daily command.</p> <p>If the command does not work, you are going to want to roll back the changes. Take a look at the /setting restore command.</p>"},{"location":"reference/reference_index/","title":"API Reference","text":"<p>This is home to the all documentation for the class libraries used by the bot.</p>"},{"location":"reference/cogs/apod/","title":"APOD","text":"<p>               Bases: <code>GroupCog</code></p> Source code in <code>src\\cogs\\apod.py</code> <pre><code>class APOD(commands.GroupCog, name=\"apod\"):\n    # Creates the time object for the daily post.\n    time = datetime.time(\n        hour=int(Config().get_unique_item(\"hour\")),\n        minute=int(Config().get_unique_item(\"minute\")),\n        tzinfo=datetime.timezone.utc\n    )\n\n    def __init__(self, bot: commands.Bot):\n        \"\"\"\n        Creates an instance of the APOD class.\n\n        Args:\n            bot (discord.ext.commands.Bot): The bot that the cog is being\n                                            added to.\n        \"\"\"\n        try:\n            config = Config()\n            self.channel = config.get_unique_item(\"apod_channel\")\n            self.endpoint = config.get_unique_item(\"apod_url\")\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n        self.post_daily_image.start()\n        self.bot = bot\n\n    @app_commands.command(name=\"daily_image\",\n                          description=\"Posts the Astronomy picture of the day.\")\n    async def daily_image(self, interaction: discord.Interaction) -&gt; None:\n        \"\"\"\n        Posts the daily APOD image to discord.\n\n        Args:\n            interaction (discord.Interaction): Represents the interaction\n                                               with discord.\n        \"\"\"\n        apod = Apod(self.endpoint)\n        if apod.is_video():\n            try:\n                await interaction.response.send_message(apod.url)\n            except Exception as e:\n                nasa_bot_logger.exception(e)\n        else:\n            image_description = apod.explanation\n            image_url = apod.url\n            try:\n                copyright = apod.copyright\n            except nasa_api_errors.NasaApiDataNotFoundError:\n                copyright = \"Copyright: NASA\"\n            color = discord.Color.dark_blue()\n            embed = discord.Embed(\n                title=\"Astronomy Picture of the Day\",\n                url=image_url,\n                color=color,\n                description=image_description\n            )\n            embed.set_image(url=image_url)\n            embed.set_footer(text=copyright)\n            try:\n                await interaction.response.send_message(embed=embed)\n            except Exception as e:\n                nasa_bot_logger.exception(e)\n\n    @tasks.loop(time=time)\n    async def post_daily_image(self) -&gt; None:\n        \"\"\"\n        Post the APOD daily to discord.\n        \"\"\"\n        channel = self.bot.get_channel(int(self.channel))\n        apod = Apod(self.endpoint)\n        if apod.is_video():\n            try:\n                await channel.send(apod.url)\n            except Exception as e:\n                nasa_bot_logger.exception(e)\n        else:\n            image_description = apod.explanation\n            image_url = apod.url\n            try:\n                copyright = apod.copyright\n            except nasa_api_errors.NasaApiDataNotFoundError:\n                copyright = \"Copyright: NASA\"\n            color = discord.Color.dark_blue()\n            embed = discord.Embed(\n                title=\"Astronomy Picture of the Day\",\n                url=image_url,\n                color=color,\n                description=image_description\n            )\n            embed.set_image(url=image_url)\n            embed.set_footer(text=copyright)\n            try:\n                await channel.send(embed=embed)\n            except Exception as e:\n                nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/apod/#src.cogs.APOD.__init__","title":"<code>__init__(bot)</code>","text":"<p>Creates an instance of the APOD class.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>Bot</code> <p>The bot that the cog is being                             added to.</p> required Source code in <code>src\\cogs\\apod.py</code> <pre><code>def __init__(self, bot: commands.Bot):\n    \"\"\"\n    Creates an instance of the APOD class.\n\n    Args:\n        bot (discord.ext.commands.Bot): The bot that the cog is being\n                                        added to.\n    \"\"\"\n    try:\n        config = Config()\n        self.channel = config.get_unique_item(\"apod_channel\")\n        self.endpoint = config.get_unique_item(\"apod_url\")\n    except Exception as e:\n        nasa_bot_logger.exception(e)\n    self.post_daily_image.start()\n    self.bot = bot\n</code></pre>"},{"location":"reference/cogs/apod/#src.cogs.APOD.daily_image","title":"<code>daily_image(interaction)</code>  <code>async</code>","text":"<p>Posts the daily APOD image to discord.</p> <p>Parameters:</p> Name Type Description Default <code>interaction</code> <code>Interaction</code> <p>Represents the interaction                                with discord.</p> required Source code in <code>src\\cogs\\apod.py</code> <pre><code>@app_commands.command(name=\"daily_image\",\n                      description=\"Posts the Astronomy picture of the day.\")\nasync def daily_image(self, interaction: discord.Interaction) -&gt; None:\n    \"\"\"\n    Posts the daily APOD image to discord.\n\n    Args:\n        interaction (discord.Interaction): Represents the interaction\n                                           with discord.\n    \"\"\"\n    apod = Apod(self.endpoint)\n    if apod.is_video():\n        try:\n            await interaction.response.send_message(apod.url)\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n    else:\n        image_description = apod.explanation\n        image_url = apod.url\n        try:\n            copyright = apod.copyright\n        except nasa_api_errors.NasaApiDataNotFoundError:\n            copyright = \"Copyright: NASA\"\n        color = discord.Color.dark_blue()\n        embed = discord.Embed(\n            title=\"Astronomy Picture of the Day\",\n            url=image_url,\n            color=color,\n            description=image_description\n        )\n        embed.set_image(url=image_url)\n        embed.set_footer(text=copyright)\n        try:\n            await interaction.response.send_message(embed=embed)\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/apod/#src.cogs.APOD.post_daily_image","title":"<code>post_daily_image()</code>  <code>async</code>","text":"<p>Post the APOD daily to discord.</p> Source code in <code>src\\cogs\\apod.py</code> <pre><code>@tasks.loop(time=time)\nasync def post_daily_image(self) -&gt; None:\n    \"\"\"\n    Post the APOD daily to discord.\n    \"\"\"\n    channel = self.bot.get_channel(int(self.channel))\n    apod = Apod(self.endpoint)\n    if apod.is_video():\n        try:\n            await channel.send(apod.url)\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n    else:\n        image_description = apod.explanation\n        image_url = apod.url\n        try:\n            copyright = apod.copyright\n        except nasa_api_errors.NasaApiDataNotFoundError:\n            copyright = \"Copyright: NASA\"\n        color = discord.Color.dark_blue()\n        embed = discord.Embed(\n            title=\"Astronomy Picture of the Day\",\n            url=image_url,\n            color=color,\n            description=image_description\n        )\n        embed.set_image(url=image_url)\n        embed.set_footer(text=copyright)\n        try:\n            await channel.send(embed=embed)\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/cogs/","title":"The cogs package","text":"<p>This pacakge contains all the extensions that come with nasa_bot by default.</p>"},{"location":"reference/cogs/cogs/#classes","title":"Classes","text":"<ul> <li>APOD</li> <li>Ping</li> <li>Settings</li> </ul>"},{"location":"reference/cogs/ping/","title":"Ping","text":"<p>               Bases: <code>Cog</code></p> Source code in <code>src\\cogs\\ping.py</code> <pre><code>class Ping(commands.Cog):\n\n    def __init__(self, bot: commands.Bot) -&gt; None:\n        \"\"\"\n        Creates an instance of the Ping class.\n\n        Args:\n            bot (discord.ext.commands.Bot): The discord bot the command is\n                                            being added to.\n        \"\"\"\n        self.bot = bot\n\n    @app_commands.command(name=\"ping\", description=\"Checks the bot latency.\")\n    async def ping(self,\n                   interaction: discord.Interaction,\n                   show_latency: bool = True) -&gt; None:\n        \"\"\"\n        Pings the discord bot.\n\n        Args:\n            interaction (discord.Interaction): Represents the interaction\n                                               from discord.\n            show_latency (bool): Whether to display the latency in the reply\n                                 or not.\n        \"\"\"\n        message = \"Pong...\"\n        if show_latency:\n            message = f\"Pong... {round(self.bot.latency, 4) * 1000}ms\"\n        try:\n            await interaction.response.send_message(message)\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/ping/#src.cogs.Ping.__init__","title":"<code>__init__(bot)</code>","text":"<p>Creates an instance of the Ping class.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>Bot</code> <p>The discord bot the command is                             being added to.</p> required Source code in <code>src\\cogs\\ping.py</code> <pre><code>def __init__(self, bot: commands.Bot) -&gt; None:\n    \"\"\"\n    Creates an instance of the Ping class.\n\n    Args:\n        bot (discord.ext.commands.Bot): The discord bot the command is\n                                        being added to.\n    \"\"\"\n    self.bot = bot\n</code></pre>"},{"location":"reference/cogs/ping/#src.cogs.Ping.ping","title":"<code>ping(interaction, show_latency=True)</code>  <code>async</code>","text":"<p>Pings the discord bot.</p> <p>Parameters:</p> Name Type Description Default <code>interaction</code> <code>Interaction</code> <p>Represents the interaction                                from discord.</p> required <code>show_latency</code> <code>bool</code> <p>Whether to display the latency in the reply                  or not.</p> <code>True</code> Source code in <code>src\\cogs\\ping.py</code> <pre><code>@app_commands.command(name=\"ping\", description=\"Checks the bot latency.\")\nasync def ping(self,\n               interaction: discord.Interaction,\n               show_latency: bool = True) -&gt; None:\n    \"\"\"\n    Pings the discord bot.\n\n    Args:\n        interaction (discord.Interaction): Represents the interaction\n                                           from discord.\n        show_latency (bool): Whether to display the latency in the reply\n                             or not.\n    \"\"\"\n    message = \"Pong...\"\n    if show_latency:\n        message = f\"Pong... {round(self.bot.latency, 4) * 1000}ms\"\n    try:\n        await interaction.response.send_message(message)\n    except Exception as e:\n        nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/settings/","title":"Settings","text":"<p>               Bases: <code>GroupCog</code></p> <p>Represents the settings commands for the discord bot.</p> Source code in <code>src\\cogs\\settings.py</code> <pre><code>class Settings(commands.GroupCog, name=\"setting\"):\n    \"\"\"\n    Represents the settings commands for the discord bot.\n    \"\"\"\n\n    def __init__(self, bot: commands.Bot) -&gt; None:\n        \"\"\"\n        Creates an instance of the Settings class.\n\n        Args:\n            bot (discord.ext.commands.Bot): The bot that the cog is being\n                                            added to.\n        \"\"\"\n        self.bot = bot\n        self.history_size: int = 4\n        self.history: list[dict] = []\n\n    def reset_history(self) -&gt; None:\n        \"\"\"\n        Checks if the history should be reset.\n        \"\"\"\n        if len(self.history) &gt; self.history_size:\n            self.history = []\n\n    @app_commands.command(\n        name=\"list_all\",\n        description=\"Displays all the current settings for the bot.\"\n    )\n    @app_commands.checks.has_permissions(administrator=True)\n    async def list_all(self, interaction: discord.Interaction) -&gt; None:\n        \"\"\"\n        Lists all the settings for the discord bot.\n\n        Args:\n            interaction (discord.Interaction): Represents the interaction\n                                               with discord.\n        \"\"\"\n        try:\n            config = Config()\n            config_items = config.config_data.items()\n            bot_name = self.bot.user\n            tab = \" -----&gt; \"\n            protected = [\n                \"token\",\n                \"bot_token\",\n                \"bot_key\",\n                \"api\",\n                \"api_token\",\n                \"api_key\",\n                \"key\",\n                \"password\",\n                \"passkey\",\n                \"pass\"\n            ]\n            embed = discord.Embed(\n                title=f\"{bot_name} Settings:\",\n                color=discord.Color.red()\n            )\n\n            for keys, values in config_items:\n                keys = str(keys)\n                values = str(values)\n                if keys.strip() in protected:\n                    embed.add_field(name=keys + tab + \"*\\*\\*\\*\\*\", value=\"\",\n                                    inline=False)\n                else:\n                    embed.add_field(name=keys + tab + values, value=\"\",\n                                    inline=False)\n\n            await interaction.response.send_message(embed=embed)\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n\n\n    @app_commands.command(\n        name=\"set\",\n        description=\"Set the state of a setting.\"\n    )\n    @app_commands.checks.has_permissions(administrator=True)\n    async def set(self,\n                  interaction: discord.Interaction,\n                  setting: str,\n                  new_value: str) -&gt; None:\n        \"\"\"\n        Sets a setting in the discord bot configuration file.\n\n        Args:\n            interaction (discord.Interaction): Represents the interaction\n                                               with discord.\n            setting (str): The setting that is being changed.\n            new_value (str): The new value for the setting.\n        \"\"\"\n        try:\n            config = Config()\n            setting = str(setting).strip()\n            new_value = str(new_value).strip()\n            previous_value = config.get_unique_item(setting)\n            self.reset_history()\n            self.history.append({setting: [previous_value, new_value]})\n            config.update_unique_item(setting, new_value)\n            embed = discord.Embed(\n                title=\"Settings changed:\",\n                color=discord.Color.red(),\n                timestamp=datetime.datetime.now()\n            )\n            embed.add_field(name=\"Old Settings\",\n                            value=f\"{setting}: {previous_value}\",\n                            inline=False)\n            embed.add_field(name=\"New Setting\",\n                            value=f\"{setting}: {new_value}\",\n                            inline=False)\n\n            await interaction.response.send_message(embed=embed)\n        except AttributeError:\n            await interaction.response.send_message(\"The setting selected \"\n                                                    \"does not exist.\")\n            nasa_bot_logger.info(\"A non existent setting was attempted to be \"\n                                 \"changed.\")\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n\n    @app_commands.command(\n        name=\"unset\",\n        description=\"Sets a setting to the state of \\\"unset\\\".\"\n    )\n    @app_commands.checks.has_permissions(administrator=True)\n    async def unset(self,\n                    interaction: discord.Interaction,\n                    setting: str) -&gt; None:\n        \"\"\"\n        Sets a value in the discord bot configuration to a value of \"unset\".\n\n        Args:\n            interaction (discord.Interaction): Represents the interaction\n                                               with discord.\n            setting (str): The setting to \"unset\".\n        \"\"\"\n        try:\n            config = Config()\n            setting = str(setting).strip()\n            previous_value = config.get_unique_item(setting)\n            self.reset_history()\n            self.history.append({setting: [previous_value, \"unset\"]})\n            config.update_unique_item(setting, \"unset\")\n            embed = discord.Embed(\n                title=\"Settings changed:\",\n                color=discord.Color.red(),\n                timestamp=datetime.datetime.now()\n            )\n            embed.add_field(name=\"Old Settings\",\n                            value=f\"{setting}: {previous_value}\",\n                            inline=False)\n            embed.add_field(name=\"New Setting\",\n                            value=f\"{setting}: unset\",\n                            inline=False)\n\n            await interaction.response.send_message(embed=embed)\n        except AttributeError:\n            await interaction.response.send_message(\"The setting selected \"\n                                                    \"does not exist.\")\n            nasa_bot_logger.info(\"A non existent setting was attempted to be \"\n                                 \"unset.\")\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n\n    @app_commands.command(\n        name=\"view_history\",\n        description=\"Displays the history for the past 5 changes that have \"\n                    \"been made to the settings.\"\n    )\n    @app_commands.checks.has_permissions(administrator=True)\n    async def view_history(self, interaction: discord.Interaction) -&gt; None:\n        \"\"\"\n        List the history of changes to the bot settings.\n\n        Args:\n            interaction (discord.Interaction): Represents the interaction\n                                               with discord.\n        \"\"\"\n        setting_index = 0\n        max_history_length = 6\n        embed = discord.Embed(\n            title=\"Recent Changes:\",\n            color=discord.Color.red(),\n            description=\"Changes can be reverted with: /settings restore #\",\n            timestamp=datetime.datetime.now()\n        )\n        for setting in self.history:\n            if setting_index &lt; max_history_length:\n                for key, value in setting.items():\n                    embed.add_field(name=f\"{setting_index}. {key}\",\n                                    value=f\"Old Value: {value[0]} ----&gt; New \"\n                                          f\"Value: {value[1]}\",\n                                    inline=False)\n                    setting_index += 1\n        try:\n            await interaction.response.send_message(embed=embed)\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n\n    @app_commands.command(\n        name=\"restore\",\n        description=\"Allows for a previous setting to be restored. Can only \"\n                    \"be done on the past 5 commands executed\"\n    )\n    @app_commands.checks.has_permissions(administrator=True)\n    async def restore(self,\n                      interaction: discord.Interaction,\n                      change: int) -&gt; None:\n        \"\"\"\n        Restores a past setting change to the previous state.\n\n        Args:\n            interaction (discord.Interaction): Represents the interaction\n                                               with discord.\n            change (int): The number of the change that is to be reverted.\n        \"\"\"\n        try:\n            config = Config()\n            change = self.history[change]\n            for key, value in change.items():\n                config.update_unique_item(key, value[0])\n\n            self.history.remove(change)\n            await interaction.response.send_message(f\"Change #{change} \"\n                                                    f\"has be reset.\")\n        except IndexError:\n            await interaction.response.send_message(\"The change selected does \"\n                                                    \"not exist.\")\n        except Exception as e:\n            nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/settings/#src.cogs.Settings.__init__","title":"<code>__init__(bot)</code>","text":"<p>Creates an instance of the Settings class.</p> <p>Parameters:</p> Name Type Description Default <code>bot</code> <code>Bot</code> <p>The bot that the cog is being                             added to.</p> required Source code in <code>src\\cogs\\settings.py</code> <pre><code>def __init__(self, bot: commands.Bot) -&gt; None:\n    \"\"\"\n    Creates an instance of the Settings class.\n\n    Args:\n        bot (discord.ext.commands.Bot): The bot that the cog is being\n                                        added to.\n    \"\"\"\n    self.bot = bot\n    self.history_size: int = 4\n    self.history: list[dict] = []\n</code></pre>"},{"location":"reference/cogs/settings/#src.cogs.Settings.list_all","title":"<code>list_all(interaction)</code>  <code>async</code>","text":"<p>Lists all the settings for the discord bot.</p> <p>Parameters:</p> Name Type Description Default <code>interaction</code> <code>Interaction</code> <p>Represents the interaction                                with discord.</p> required Source code in <code>src\\cogs\\settings.py</code> <pre><code>@app_commands.command(\n    name=\"list_all\",\n    description=\"Displays all the current settings for the bot.\"\n)\n@app_commands.checks.has_permissions(administrator=True)\nasync def list_all(self, interaction: discord.Interaction) -&gt; None:\n    \"\"\"\n    Lists all the settings for the discord bot.\n\n    Args:\n        interaction (discord.Interaction): Represents the interaction\n                                           with discord.\n    \"\"\"\n    try:\n        config = Config()\n        config_items = config.config_data.items()\n        bot_name = self.bot.user\n        tab = \" -----&gt; \"\n        protected = [\n            \"token\",\n            \"bot_token\",\n            \"bot_key\",\n            \"api\",\n            \"api_token\",\n            \"api_key\",\n            \"key\",\n            \"password\",\n            \"passkey\",\n            \"pass\"\n        ]\n        embed = discord.Embed(\n            title=f\"{bot_name} Settings:\",\n            color=discord.Color.red()\n        )\n\n        for keys, values in config_items:\n            keys = str(keys)\n            values = str(values)\n            if keys.strip() in protected:\n                embed.add_field(name=keys + tab + \"*\\*\\*\\*\\*\", value=\"\",\n                                inline=False)\n            else:\n                embed.add_field(name=keys + tab + values, value=\"\",\n                                inline=False)\n\n        await interaction.response.send_message(embed=embed)\n    except Exception as e:\n        nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/settings/#src.cogs.Settings.reset_history","title":"<code>reset_history()</code>","text":"<p>Checks if the history should be reset.</p> Source code in <code>src\\cogs\\settings.py</code> <pre><code>def reset_history(self) -&gt; None:\n    \"\"\"\n    Checks if the history should be reset.\n    \"\"\"\n    if len(self.history) &gt; self.history_size:\n        self.history = []\n</code></pre>"},{"location":"reference/cogs/settings/#src.cogs.Settings.restore","title":"<code>restore(interaction, change)</code>  <code>async</code>","text":"<p>Restores a past setting change to the previous state.</p> <p>Parameters:</p> Name Type Description Default <code>interaction</code> <code>Interaction</code> <p>Represents the interaction                                with discord.</p> required <code>change</code> <code>int</code> <p>The number of the change that is to be reverted.</p> required Source code in <code>src\\cogs\\settings.py</code> <pre><code>@app_commands.command(\n    name=\"restore\",\n    description=\"Allows for a previous setting to be restored. Can only \"\n                \"be done on the past 5 commands executed\"\n)\n@app_commands.checks.has_permissions(administrator=True)\nasync def restore(self,\n                  interaction: discord.Interaction,\n                  change: int) -&gt; None:\n    \"\"\"\n    Restores a past setting change to the previous state.\n\n    Args:\n        interaction (discord.Interaction): Represents the interaction\n                                           with discord.\n        change (int): The number of the change that is to be reverted.\n    \"\"\"\n    try:\n        config = Config()\n        change = self.history[change]\n        for key, value in change.items():\n            config.update_unique_item(key, value[0])\n\n        self.history.remove(change)\n        await interaction.response.send_message(f\"Change #{change} \"\n                                                f\"has be reset.\")\n    except IndexError:\n        await interaction.response.send_message(\"The change selected does \"\n                                                \"not exist.\")\n    except Exception as e:\n        nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/settings/#src.cogs.Settings.set","title":"<code>set(interaction, setting, new_value)</code>  <code>async</code>","text":"<p>Sets a setting in the discord bot configuration file.</p> <p>Parameters:</p> Name Type Description Default <code>interaction</code> <code>Interaction</code> <p>Represents the interaction                                with discord.</p> required <code>setting</code> <code>str</code> <p>The setting that is being changed.</p> required <code>new_value</code> <code>str</code> <p>The new value for the setting.</p> required Source code in <code>src\\cogs\\settings.py</code> <pre><code>@app_commands.command(\n    name=\"set\",\n    description=\"Set the state of a setting.\"\n)\n@app_commands.checks.has_permissions(administrator=True)\nasync def set(self,\n              interaction: discord.Interaction,\n              setting: str,\n              new_value: str) -&gt; None:\n    \"\"\"\n    Sets a setting in the discord bot configuration file.\n\n    Args:\n        interaction (discord.Interaction): Represents the interaction\n                                           with discord.\n        setting (str): The setting that is being changed.\n        new_value (str): The new value for the setting.\n    \"\"\"\n    try:\n        config = Config()\n        setting = str(setting).strip()\n        new_value = str(new_value).strip()\n        previous_value = config.get_unique_item(setting)\n        self.reset_history()\n        self.history.append({setting: [previous_value, new_value]})\n        config.update_unique_item(setting, new_value)\n        embed = discord.Embed(\n            title=\"Settings changed:\",\n            color=discord.Color.red(),\n            timestamp=datetime.datetime.now()\n        )\n        embed.add_field(name=\"Old Settings\",\n                        value=f\"{setting}: {previous_value}\",\n                        inline=False)\n        embed.add_field(name=\"New Setting\",\n                        value=f\"{setting}: {new_value}\",\n                        inline=False)\n\n        await interaction.response.send_message(embed=embed)\n    except AttributeError:\n        await interaction.response.send_message(\"The setting selected \"\n                                                \"does not exist.\")\n        nasa_bot_logger.info(\"A non existent setting was attempted to be \"\n                             \"changed.\")\n    except Exception as e:\n        nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/settings/#src.cogs.Settings.unset","title":"<code>unset(interaction, setting)</code>  <code>async</code>","text":"<p>Sets a value in the discord bot configuration to a value of \"unset\".</p> <p>Parameters:</p> Name Type Description Default <code>interaction</code> <code>Interaction</code> <p>Represents the interaction                                with discord.</p> required <code>setting</code> <code>str</code> <p>The setting to \"unset\".</p> required Source code in <code>src\\cogs\\settings.py</code> <pre><code>@app_commands.command(\n    name=\"unset\",\n    description=\"Sets a setting to the state of \\\"unset\\\".\"\n)\n@app_commands.checks.has_permissions(administrator=True)\nasync def unset(self,\n                interaction: discord.Interaction,\n                setting: str) -&gt; None:\n    \"\"\"\n    Sets a value in the discord bot configuration to a value of \"unset\".\n\n    Args:\n        interaction (discord.Interaction): Represents the interaction\n                                           with discord.\n        setting (str): The setting to \"unset\".\n    \"\"\"\n    try:\n        config = Config()\n        setting = str(setting).strip()\n        previous_value = config.get_unique_item(setting)\n        self.reset_history()\n        self.history.append({setting: [previous_value, \"unset\"]})\n        config.update_unique_item(setting, \"unset\")\n        embed = discord.Embed(\n            title=\"Settings changed:\",\n            color=discord.Color.red(),\n            timestamp=datetime.datetime.now()\n        )\n        embed.add_field(name=\"Old Settings\",\n                        value=f\"{setting}: {previous_value}\",\n                        inline=False)\n        embed.add_field(name=\"New Setting\",\n                        value=f\"{setting}: unset\",\n                        inline=False)\n\n        await interaction.response.send_message(embed=embed)\n    except AttributeError:\n        await interaction.response.send_message(\"The setting selected \"\n                                                \"does not exist.\")\n        nasa_bot_logger.info(\"A non existent setting was attempted to be \"\n                             \"unset.\")\n    except Exception as e:\n        nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/cogs/settings/#src.cogs.Settings.view_history","title":"<code>view_history(interaction)</code>  <code>async</code>","text":"<p>List the history of changes to the bot settings.</p> <p>Parameters:</p> Name Type Description Default <code>interaction</code> <code>Interaction</code> <p>Represents the interaction                                with discord.</p> required Source code in <code>src\\cogs\\settings.py</code> <pre><code>@app_commands.command(\n    name=\"view_history\",\n    description=\"Displays the history for the past 5 changes that have \"\n                \"been made to the settings.\"\n)\n@app_commands.checks.has_permissions(administrator=True)\nasync def view_history(self, interaction: discord.Interaction) -&gt; None:\n    \"\"\"\n    List the history of changes to the bot settings.\n\n    Args:\n        interaction (discord.Interaction): Represents the interaction\n                                           with discord.\n    \"\"\"\n    setting_index = 0\n    max_history_length = 6\n    embed = discord.Embed(\n        title=\"Recent Changes:\",\n        color=discord.Color.red(),\n        description=\"Changes can be reverted with: /settings restore #\",\n        timestamp=datetime.datetime.now()\n    )\n    for setting in self.history:\n        if setting_index &lt; max_history_length:\n            for key, value in setting.items():\n                embed.add_field(name=f\"{setting_index}. {key}\",\n                                value=f\"Old Value: {value[0]} ----&gt; New \"\n                                      f\"Value: {value[1]}\",\n                                inline=False)\n                setting_index += 1\n    try:\n        await interaction.response.send_message(embed=embed)\n    except Exception as e:\n        nasa_bot_logger.exception(e)\n</code></pre>"},{"location":"reference/nasa_api/api_request/","title":"ApiRequest","text":"<p>Represents a request to a NASA API</p> Source code in <code>src\\nasa_api\\api_request.py</code> <pre><code>class ApiRequest:\n    \"\"\"\n    Represents a request to a NASA API\n    \"\"\"\n\n    def __init__(self, endpoint: str) -&gt; None:\n        \"\"\"\n        Creates an instance of the ApiRequest class.\n\n        Args:\n            endpoint (str): The endpoint url for the request.\n        \"\"\"\n        self._endpoint = endpoint\n        self._request_data = get(endpoint).json()\n\n    @property\n    def endpoint(self) -&gt; str:\n        \"\"\"\n        Gets the endpoint url for the request.\n        \"\"\"\n        return self._endpoint\n\n    @endpoint.setter\n    def endpoint(self, value: str) -&gt; None:\n        \"\"\"\n        Sets the endpoint for the request and updates the request data.\n\n        Args:\n            value (str): The new endpoint url\n        \"\"\"\n        self._endpoint = value\n        self._request_data = get(value).json()\n\n    @property\n    def request_data(self) -&gt; dict:\n        \"\"\"\n        Gets the request data from the request made the endpoint.\n        \"\"\"\n        return self._request_data\n</code></pre>"},{"location":"reference/nasa_api/api_request/#src.nasa_api.ApiRequest.endpoint","title":"<code>endpoint: str</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the endpoint url for the request.</p>"},{"location":"reference/nasa_api/api_request/#src.nasa_api.ApiRequest.request_data","title":"<code>request_data: dict</code>  <code>property</code>","text":"<p>Gets the request data from the request made the endpoint.</p>"},{"location":"reference/nasa_api/api_request/#src.nasa_api.ApiRequest.__init__","title":"<code>__init__(endpoint)</code>","text":"<p>Creates an instance of the ApiRequest class.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The endpoint url for the request.</p> required Source code in <code>src\\nasa_api\\api_request.py</code> <pre><code>def __init__(self, endpoint: str) -&gt; None:\n    \"\"\"\n    Creates an instance of the ApiRequest class.\n\n    Args:\n        endpoint (str): The endpoint url for the request.\n    \"\"\"\n    self._endpoint = endpoint\n    self._request_data = get(endpoint).json()\n</code></pre>"},{"location":"reference/nasa_api/apod/","title":"Apod","text":"<p>               Bases: <code>ApiRequest</code></p> <p>Represents a request to the APOD NASA API.</p> Source code in <code>src\\nasa_api\\apod.py</code> <pre><code>class Apod(ApiRequest):\n    \"\"\"\n    Represents a request to the APOD NASA API.\n    \"\"\"\n\n    def __init__(self, endpoint: str) -&gt; None:\n        \"\"\"\n        Cerates an instance of the Apod class.\n\n        Args:\n            endpoint (str): The apod endpoint.\n        \"\"\"\n        super().__init__(endpoint)\n\n    @property\n    def copyright(self) -&gt; str:\n        \"\"\"\n        Copy right info for the request.\n\n        Returns\n            str: The copy right info for the request.\n\n        Raises:\n            NasaApiDataNotFoundError: Raised when the request does not have\n                                      copyright info.\n        \"\"\"\n        try:\n            return super().request_data[\"copyright\"]\n        except KeyError:\n            raise NasaApiDataNotFoundError(\n                \"Request did not contain copyright info.\")\n\n    @property\n    def date(self) -&gt; str:\n        \"\"\"\n        The date that corresponds to the Astronomy Picture of the Day date.\n\n        Returns:\n            str: The request APOD date.\n\n        Raises:\n            NasaApiDataNotFoundError: Raised when the request does not have a\n                                      date.\n        \"\"\"\n        try:\n            return super().request_data[\"date\"]\n        except KeyError:\n            raise NasaApiDataNotFoundError(\"Request did not contain a date.\")\n\n    @property\n    def explanation(self) -&gt; str:\n        \"\"\"\n        An explanation of the image/video that is in the request.\n\n        Returns:\n            str: The explanation for the image/video in the request.\n\n        Raises:\n            NasaApiDataNotFoundError: Raised when an explanation is not found\n                                      in the request.\n        \"\"\"\n        try:\n            return super().request_data[\"explanation\"]\n        except KeyError:\n            raise NasaApiDataNotFoundError(\n                \"Request did not contain an explanation.\")\n\n    @property\n    def media_type(self) -&gt; str:\n        \"\"\"\n        The type of media that the requests contains. Should be an image or\n        video.\n\n        Returns:\n            str: The type of media in the request.\n\n        Raises:\n            NasaApiDataNotFoundError: Raised when the request does not have a\n                                      media type.\n        \"\"\"\n        try:\n            return super().request_data[\"media_type\"]\n        except KeyError:\n            raise NasaApiDataNotFoundError(\n                \"Request did not contain a media_type.\")\n\n    @property\n    def service_version(self) -&gt; str:\n        \"\"\"\n        The version of the system that provides the API.\n\n        Returns:\n            str: The version of the service that provides the API.\n\n        Raises:\n            NasaApiDataNotFoundError: Raised when a service version is not in\n                                      the response.\n        \"\"\"\n        try:\n            return super().request_data[\"service_version\"]\n        except KeyError:\n            raise NasaApiDataNotFoundError(\"Request did not contain a service \"\n                                           \"version.\")\n\n    @property\n    def title(self) -&gt; str:\n        \"\"\"\n        The title of the image/video in the request.\n\n        Returns:\n            str: The title of the image/video in the request.\n\n        Raises:\n            NasaApiDataNotFoundError: Raised when the request does not\n                                      contain a title.\n        \"\"\"\n        try:\n            return super().request_data[\"title\"]\n        except KeyError:\n            raise NasaApiDataNotFoundError(\"Request did not contain a title.\")\n\n    @property\n    def url(self) -&gt; str:\n        \"\"\"\n        The URL that points the image/video of the day.\n\n        Returns:\n            str: The URL that points to the image/video of the day.\n\n        Raises:\n            NasaApiDataNotFoundError: Is raised when the request does not\n                                      contain a URL.\n        \"\"\"\n        try:\n            return super().request_data[\"url\"]\n        except KeyError:\n            raise NasaApiDataNotFoundError(\"Request did not contain a url.\")\n\n    @property\n    def hdurl(self) -&gt; str:\n        \"\"\"\n        The URL that links to an HD version of the image in the request.\n\n        Returns:\n            str: The URL that links to the HD version of the image in the\n                 request.\n\n        Raises:\n            NasaApiDataNotFoundError: Is raised if the request does not\n                                      contain an HD URL (hdurl in request).\n        \"\"\"\n        try:\n            return super().request_data[\"hdurl\"]\n        except KeyError:\n            raise NasaApiDataNotFoundError(\n                \"Request data did not contain an hdurl. Check if \"\n                \"request has provided a video.\")\n\n    def is_video(self) -&gt; bool:\n        \"\"\"\n        Checks if the content of the request is a video.\n\n        Returns:\n            bool: Returns true if the content is a video.\n        \"\"\"\n        return self.media_type == \"video\"\n\n    def is_image(self) -&gt; bool:\n        \"\"\"\n        Checks if the content of the request is an image.\n\n        Returns:\n            str: Returns true of the content is an image.\n        \"\"\"\n        return self.media_type == \"image\"\n</code></pre>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.copyright","title":"<code>copyright: str</code>  <code>property</code>","text":"<p>Copy right info for the request.</p> <p>Returns     str: The copy right info for the request.</p> <p>Raises:</p> Type Description <code>NasaApiDataNotFoundError</code> <p>Raised when the request does not have                       copyright info.</p>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.date","title":"<code>date: str</code>  <code>property</code>","text":"<p>The date that corresponds to the Astronomy Picture of the Day date.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The request APOD date.</p> <p>Raises:</p> Type Description <code>NasaApiDataNotFoundError</code> <p>Raised when the request does not have a                       date.</p>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.explanation","title":"<code>explanation: str</code>  <code>property</code>","text":"<p>An explanation of the image/video that is in the request.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The explanation for the image/video in the request.</p> <p>Raises:</p> Type Description <code>NasaApiDataNotFoundError</code> <p>Raised when an explanation is not found                       in the request.</p>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.hdurl","title":"<code>hdurl: str</code>  <code>property</code>","text":"<p>The URL that links to an HD version of the image in the request.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The URL that links to the HD version of the image in the  request.</p> <p>Raises:</p> Type Description <code>NasaApiDataNotFoundError</code> <p>Is raised if the request does not                       contain an HD URL (hdurl in request).</p>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.media_type","title":"<code>media_type: str</code>  <code>property</code>","text":"<p>The type of media that the requests contains. Should be an image or video.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The type of media in the request.</p> <p>Raises:</p> Type Description <code>NasaApiDataNotFoundError</code> <p>Raised when the request does not have a                       media type.</p>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.service_version","title":"<code>service_version: str</code>  <code>property</code>","text":"<p>The version of the system that provides the API.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The version of the service that provides the API.</p> <p>Raises:</p> Type Description <code>NasaApiDataNotFoundError</code> <p>Raised when a service version is not in                       the response.</p>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.title","title":"<code>title: str</code>  <code>property</code>","text":"<p>The title of the image/video in the request.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The title of the image/video in the request.</p> <p>Raises:</p> Type Description <code>NasaApiDataNotFoundError</code> <p>Raised when the request does not                       contain a title.</p>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.url","title":"<code>url: str</code>  <code>property</code>","text":"<p>The URL that points the image/video of the day.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>str</code> <p>The URL that points to the image/video of the day.</p> <p>Raises:</p> Type Description <code>NasaApiDataNotFoundError</code> <p>Is raised when the request does not                       contain a URL.</p>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.__init__","title":"<code>__init__(endpoint)</code>","text":"<p>Cerates an instance of the Apod class.</p> <p>Parameters:</p> Name Type Description Default <code>endpoint</code> <code>str</code> <p>The apod endpoint.</p> required Source code in <code>src\\nasa_api\\apod.py</code> <pre><code>def __init__(self, endpoint: str) -&gt; None:\n    \"\"\"\n    Cerates an instance of the Apod class.\n\n    Args:\n        endpoint (str): The apod endpoint.\n    \"\"\"\n    super().__init__(endpoint)\n</code></pre>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.is_image","title":"<code>is_image()</code>","text":"<p>Checks if the content of the request is an image.</p> <p>Returns:</p> Name Type Description <code>str</code> <code>bool</code> <p>Returns true of the content is an image.</p> Source code in <code>src\\nasa_api\\apod.py</code> <pre><code>def is_image(self) -&gt; bool:\n    \"\"\"\n    Checks if the content of the request is an image.\n\n    Returns:\n        str: Returns true of the content is an image.\n    \"\"\"\n    return self.media_type == \"image\"\n</code></pre>"},{"location":"reference/nasa_api/apod/#src.nasa_api.Apod.is_video","title":"<code>is_video()</code>","text":"<p>Checks if the content of the request is a video.</p> <p>Returns:</p> Name Type Description <code>bool</code> <code>bool</code> <p>Returns true if the content is a video.</p> Source code in <code>src\\nasa_api\\apod.py</code> <pre><code>def is_video(self) -&gt; bool:\n    \"\"\"\n    Checks if the content of the request is a video.\n\n    Returns:\n        bool: Returns true if the content is a video.\n    \"\"\"\n    return self.media_type == \"video\"\n</code></pre>"},{"location":"reference/nasa_api/nasa_api/","title":"The nasa_api package","text":"<p>This package contains the classes that are used for wrapping the NASA Open APIs.</p>"},{"location":"reference/nasa_api/nasa_api/#classes","title":"Classes","text":"<ul> <li>ApiRequest</li> <li>Apod</li> </ul>"},{"location":"reference/nasa_api/nasa_api/#exception-classes","title":"Exception Classes:","text":"<p>The nasa_api_errors file contains all the classes that represent exceptions used by the api wrapper.</p> <ul> <li>NasaApiDataNotFoundError</li> </ul>"},{"location":"reference/nasa_api/nasa_api_errors/","title":"nasa_api_errors","text":"<p>This is the file that stores all the classes that represent exceptions.</p>"},{"location":"reference/nasa_api/nasa_api_errors/#nasaapidatanotfounderror","title":"NasaApiDataNotFoundError","text":"<p>               Bases: <code>Exception</code></p> <p>Represents an exception caused by data not being found in a NASA API request.</p> Source code in <code>src\\nasa_api\\nasa_api_errors.py</code> <pre><code>class NasaApiDataNotFoundError(Exception):\n    \"\"\"\n    Represents an exception caused by data not being found in a NASA API\n    request.\n    \"\"\"\n\n    def __init__(self, message=\"The NASA API wrapper has encountered an error\"):\n        \"\"\"\n        Creates an instance of the NasaApiDataNotFoundError class.\n\n        Args:\n            message (str): The message that the exception raises.\n        \"\"\"\n        super().__init__(message)\n</code></pre>"},{"location":"reference/nasa_api/nasa_api_errors/#src.nasa_api.NasaApiDataNotFoundError.__init__","title":"<code>__init__(message='The NASA API wrapper has encountered an error')</code>","text":"<p>Creates an instance of the NasaApiDataNotFoundError class.</p> <p>Parameters:</p> Name Type Description Default <code>message</code> <code>str</code> <p>The message that the exception raises.</p> <code>'The NASA API wrapper has encountered an error'</code> Source code in <code>src\\nasa_api\\nasa_api_errors.py</code> <pre><code>def __init__(self, message=\"The NASA API wrapper has encountered an error\"):\n    \"\"\"\n    Creates an instance of the NasaApiDataNotFoundError class.\n\n    Args:\n        message (str): The message that the exception raises.\n    \"\"\"\n    super().__init__(message)\n</code></pre>"},{"location":"reference/utils/config/","title":"Config","text":"<p>Represents a config file and it's contents</p> Source code in <code>src\\utils\\config.py</code> <pre><code>class Config:\n    \"\"\"\n    Represents a config file and it's contents\n    \"\"\"\n\n    def __init__(self, path: str = \"./conf/bot_config.yaml\") -&gt; None:\n        \"\"\"\n        Creates an instance of the Config class.\n\n        Args:\n            path (str): The path to the config file.\n        \"\"\"\n        try:\n            self._file_path = os.path.abspath(path)\n            with open(path) as file:\n                self._config_data = yaml.safe_load(file)\n        except FileNotFoundError:\n            raise FileNotFoundError(\"The Path provided is not valid.\")\n\n    @property\n    def file_path(self) -&gt; str:\n        \"\"\"\n        Gets the config file's file path.\n        \"\"\"\n        return self._file_path\n\n    @file_path.setter\n    def file_path(self, value: str) -&gt; None:\n        \"\"\"\n        Sets the value of the file path and updates the config being opened.\n\n        Args:\n            value (str): The path to the config file being set.\n        \"\"\"\n        try:\n            self._file_path = os.path.abspath(value)\n            with open(value) as file:\n                self._config_data = yaml.safe_load(file)\n        except FileNotFoundError:\n            raise FileNotFoundError(\"The Path provided is not valid.\")\n\n    @property\n    def config_data(self) -&gt; dict:\n        \"\"\"\n        Gets all the config data from the config file.\n        \"\"\"\n        return self._config_data\n\n    def get_unique_item(self, index: str) -&gt; str | int | float | list | dict:\n        \"\"\"\n        Returns the value of a unique item in the config file\n\n        Args:\n            index (str): The name of the item being looked for in the config.\n\n        Raises:\n            AttributeError: Is raised when the index value is not found in\n                            the config file\n\n        Returns:\n            str | int | float | list | dict: The value of the specified item.\n        \"\"\"\n        queue = deque([self.config_data])\n\n        while queue:\n            data = queue.popleft()\n            for key, value in data.items():\n                if str(key) == index:\n                    return value\n                elif isinstance(value, dict):\n                    queue.append(value)\n\n        raise AttributeError(f\"{index} is not in the config file.\")\n\n    def update_unique_item(self, index: str,\n                           new_value: str | int | float | list) -&gt; None:\n        \"\"\"\n        Updates the value of a unique item in the config file.\n\n        Args:\n            index (str): The name of the item being looked for in the config.\n            new_value (str | int | float | list): The new value that the item\n                                                  in the config file is being\n                                                  set to.\n\n        Raises:\n            AttributeError: Is raised when the value could not be set due the\n                            item not existing in the config.\n        \"\"\"\n        is_success = False\n        new_data = self.config_data.copy()\n        queue = deque([new_data])\n\n        while queue:\n            data = queue.popleft()\n            for key, value in data.items():\n                if str(key) == index:\n                    data[key] = new_value\n                    with open(self.file_path, 'w') as file:\n                        yaml.safe_dump(new_data, file)\n                    is_success = True\n                elif isinstance(value, dict):\n                    queue.append(value)\n\n        if not is_success:\n            raise AttributeError(\n                f\"Value could not be set. Ensure that {index} is in the \"\n                f\"config file.\")\n\n    def get_section_item(self, section_name: str, index: str) -&gt; str:\n        \"\"\"\n        Gets an item that is part of a specific section of the config file.\n\n        Args:\n            section_name (str): The section that the item is in.\n            index (str): The item that is being looked for in the config.\n\n        Raises:\n            AttributeError: Is raised when the specified value is not in the\n                            config file.\n\n        Returns:\n            str | int | float | list | dict: The value of the specified item.\n        \"\"\"\n        queue = deque([self.config_data])\n\n        while queue:\n            data = queue.popleft()\n            for key, value in data.items():\n                if isinstance(value, dict) and str(key) == section_name:\n                    queue.append(value)\n                elif str(key) == index:\n                    return value\n\n        raise AttributeError(f\"{index} is not in the {section_name} \"\n                             f\"section of the config file.\")\n</code></pre>"},{"location":"reference/utils/config/#src.utils.Config.config_data","title":"<code>config_data: dict</code>  <code>property</code>","text":"<p>Gets all the config data from the config file.</p>"},{"location":"reference/utils/config/#src.utils.Config.file_path","title":"<code>file_path: str</code>  <code>property</code> <code>writable</code>","text":"<p>Gets the config file's file path.</p>"},{"location":"reference/utils/config/#src.utils.Config.__init__","title":"<code>__init__(path='./conf/bot_config.yaml')</code>","text":"<p>Creates an instance of the Config class.</p> <p>Parameters:</p> Name Type Description Default <code>path</code> <code>str</code> <p>The path to the config file.</p> <code>'./conf/bot_config.yaml'</code> Source code in <code>src\\utils\\config.py</code> <pre><code>def __init__(self, path: str = \"./conf/bot_config.yaml\") -&gt; None:\n    \"\"\"\n    Creates an instance of the Config class.\n\n    Args:\n        path (str): The path to the config file.\n    \"\"\"\n    try:\n        self._file_path = os.path.abspath(path)\n        with open(path) as file:\n            self._config_data = yaml.safe_load(file)\n    except FileNotFoundError:\n        raise FileNotFoundError(\"The Path provided is not valid.\")\n</code></pre>"},{"location":"reference/utils/config/#src.utils.Config.get_section_item","title":"<code>get_section_item(section_name, index)</code>","text":"<p>Gets an item that is part of a specific section of the config file.</p> <p>Parameters:</p> Name Type Description Default <code>section_name</code> <code>str</code> <p>The section that the item is in.</p> required <code>index</code> <code>str</code> <p>The item that is being looked for in the config.</p> required <p>Raises:</p> Type Description <code>AttributeError</code> <p>Is raised when the specified value is not in the             config file.</p> <p>Returns:</p> Type Description <code>str</code> <p>str | int | float | list | dict: The value of the specified item.</p> Source code in <code>src\\utils\\config.py</code> <pre><code>def get_section_item(self, section_name: str, index: str) -&gt; str:\n    \"\"\"\n    Gets an item that is part of a specific section of the config file.\n\n    Args:\n        section_name (str): The section that the item is in.\n        index (str): The item that is being looked for in the config.\n\n    Raises:\n        AttributeError: Is raised when the specified value is not in the\n                        config file.\n\n    Returns:\n        str | int | float | list | dict: The value of the specified item.\n    \"\"\"\n    queue = deque([self.config_data])\n\n    while queue:\n        data = queue.popleft()\n        for key, value in data.items():\n            if isinstance(value, dict) and str(key) == section_name:\n                queue.append(value)\n            elif str(key) == index:\n                return value\n\n    raise AttributeError(f\"{index} is not in the {section_name} \"\n                         f\"section of the config file.\")\n</code></pre>"},{"location":"reference/utils/config/#src.utils.Config.get_unique_item","title":"<code>get_unique_item(index)</code>","text":"<p>Returns the value of a unique item in the config file</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>The name of the item being looked for in the config.</p> required <p>Raises:</p> Type Description <code>AttributeError</code> <p>Is raised when the index value is not found in             the config file</p> <p>Returns:</p> Type Description <code>str | int | float | list | dict</code> <p>str | int | float | list | dict: The value of the specified item.</p> Source code in <code>src\\utils\\config.py</code> <pre><code>def get_unique_item(self, index: str) -&gt; str | int | float | list | dict:\n    \"\"\"\n    Returns the value of a unique item in the config file\n\n    Args:\n        index (str): The name of the item being looked for in the config.\n\n    Raises:\n        AttributeError: Is raised when the index value is not found in\n                        the config file\n\n    Returns:\n        str | int | float | list | dict: The value of the specified item.\n    \"\"\"\n    queue = deque([self.config_data])\n\n    while queue:\n        data = queue.popleft()\n        for key, value in data.items():\n            if str(key) == index:\n                return value\n            elif isinstance(value, dict):\n                queue.append(value)\n\n    raise AttributeError(f\"{index} is not in the config file.\")\n</code></pre>"},{"location":"reference/utils/config/#src.utils.Config.update_unique_item","title":"<code>update_unique_item(index, new_value)</code>","text":"<p>Updates the value of a unique item in the config file.</p> <p>Parameters:</p> Name Type Description Default <code>index</code> <code>str</code> <p>The name of the item being looked for in the config.</p> required <code>new_value</code> <code>str | int | float | list</code> <p>The new value that the item                                   in the config file is being                                   set to.</p> required <p>Raises:</p> Type Description <code>AttributeError</code> <p>Is raised when the value could not be set due the             item not existing in the config.</p> Source code in <code>src\\utils\\config.py</code> <pre><code>def update_unique_item(self, index: str,\n                       new_value: str | int | float | list) -&gt; None:\n    \"\"\"\n    Updates the value of a unique item in the config file.\n\n    Args:\n        index (str): The name of the item being looked for in the config.\n        new_value (str | int | float | list): The new value that the item\n                                              in the config file is being\n                                              set to.\n\n    Raises:\n        AttributeError: Is raised when the value could not be set due the\n                        item not existing in the config.\n    \"\"\"\n    is_success = False\n    new_data = self.config_data.copy()\n    queue = deque([new_data])\n\n    while queue:\n        data = queue.popleft()\n        for key, value in data.items():\n            if str(key) == index:\n                data[key] = new_value\n                with open(self.file_path, 'w') as file:\n                    yaml.safe_dump(new_data, file)\n                is_success = True\n            elif isinstance(value, dict):\n                queue.append(value)\n\n    if not is_success:\n        raise AttributeError(\n            f\"Value could not be set. Ensure that {index} is in the \"\n            f\"config file.\")\n</code></pre>"},{"location":"reference/utils/nasa_bot_logger/","title":"nasa_bot_logger","text":""},{"location":"reference/utils/nasa_bot_logger/#src.utils.nasa_bot_logger.nasa_bot_logger","title":"<code>nasa_bot_logger = logging.getLogger('nasa_bot')</code>  <code>module-attribute</code>","text":"<p>The logger that is used by all of nasa bot.</p>"},{"location":"reference/utils/utils/","title":"The utils package","text":"<p>This package contains classes that have helper functions that make it easier to handle tasks like writing to the config or logging with the bot.</p>"},{"location":"reference/utils/utils/#classes","title":"Classes","text":"<ul> <li>Config</li> </ul>"},{"location":"reference/utils/utils/#modules","title":"Modules","text":"<ul> <li>nasa_bot_logger</li> </ul>"}]}